/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.itson.bdavanzadas.presentacion;

import java.lang.module.FindException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.itson.bdavanzadas.AdminVentas.FacadeAdminVentas;
import org.itson.bdavanzadas.AdminVentas.IVentas;
import org.itson.bdavanzadas.adminOrden.FacadeAdminOrden;
import org.itson.bdavanzadas.adminOrden.IAdminOrden;
import org.itson.bdavanzadas.adminTarjeta.VentanaPagarTarjeta3;
import org.itson.bdavanzadas.dtos.NuevaOrdenDTO;
import org.itson.bdavanzadas.tabla.TableActionCellEditor;
import org.itson.bdavanzadas.tabla.TableActionCellRender;
import org.itson.bdavanzadas.tabla.TableActionEvent;

/**
 *
 * @author Abe
 */
public class VentanaVentas extends javax.swing.JDialog {

    private IVentas ventas;
    private IAdminOrden adminOrden;
    private VentanaPagarTarjeta3 ventanaTarjeta;
    DefaultTableModel modelo;

    /**
     * Creates new form VentanaVentas
     */
    public VentanaVentas(java.awt.Frame parent, boolean modal) throws FindException {
        super(parent, modal);
        ventas = new FacadeAdminVentas();
        adminOrden = new FacadeAdminOrden();
        initComponents();
        consultar();
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void enCancelar(int row) {
                List<NuevaOrdenDTO> ordenes = adminOrden.obtenerOrdenesCompletadas();
                NuevaOrdenDTO OrdenSeleccionada = ordenes.get(row);
                OrdenSeleccionada.toString();
                VentanaCancelar VC = new VentanaCancelar(null, true, OrdenSeleccionada);
                VC.setVisible(true);
                if (tblOrdenes2.isEditing()) {
                    tblOrdenes2.getCellEditor().stopCellEditing();
                }
                if (VentanaCancelar.seCancelo()) {
                    DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                    model.removeRow(row);
                }
                System.out.println("cancelar" + row + OrdenSeleccionada.getNumeroOrden());
            }

            @Override
            public void enPagar(int row) {
                List<NuevaOrdenDTO> ordenes = adminOrden.obtenerOrdenesCompletadas();
                NuevaOrdenDTO OrdenSeleccionada = ordenes.get(row);
                System.out.println("pagar" + row);
                VentanaOrdenPagar ordenPagar = new VentanaOrdenPagar(null, true, OrdenSeleccionada);

                ordenPagar.setVisible(true);
                if (tblOrdenes2.isEditing()) {
                    tblOrdenes2.getCellEditor().stopCellEditing();
                }
                if (VentanaPagarEfectivo.sePago()) {
                    DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                    model.removeRow(row);
                }

                if (VentanaPagarTarjeta3.sePago()) {
                    DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                    model.removeRow(row);
                    System.out.println("SE PAGO LA VENTA POR TARJETA");
                } else {
                    System.out.println("NO SE PAGo");
                }
            }
        };
        tblOrdenes2.getColumnModel().getColumn(4).setCellRenderer(new TableActionCellRender());
        tblOrdenes2.getColumnModel().getColumn(4).setCellEditor(new TableActionCellEditor(event));
        tblOrdenes2.getColumnModel().getColumn(4).setPreferredWidth(150);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        lblHora = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblOrdenes2 = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel6.setBackground(new java.awt.Color(147, 187, 204));

        lblHora.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblHora.setText(" ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(476, 476, 476)
                .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(lblHora)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel38.setText("Pago de pedido");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel38)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(164, 180, 148));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblOrdenes2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Cliente", "Total", "Fecha", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrdenes2.setRowHeight(40);
        jScrollPane3.setViewportView(tblOrdenes2);
        if (tblOrdenes2.getColumnModel().getColumnCount() > 0) {
            tblOrdenes2.getColumnModel().getColumn(0).setPreferredWidth(300);
            tblOrdenes2.getColumnModel().getColumn(4).setPreferredWidth(196);
        }

        jPanel8.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 920, 530));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jLabel50.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/IconoComida.png"))); // NOI18N
        jLabel50.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel50.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel50MouseClicked(evt);
            }
        });

        jLabel51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono1.png"))); // NOI18N
        jLabel51.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel51.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel51MouseClicked(evt);
            }
        });

        jLabel52.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/VentaBlanca.png"))); // NOI18N
        jLabel52.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel52.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel52MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supplier.png"))); // NOI18N
        jLabel4.setText(".");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel53.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boxes.png"))); // NOI18N
        jLabel53.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel53.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel53MouseClicked(evt);
            }
        });

        jLabel54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Icono historial.png"))); // NOI18N
        jLabel54.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel54.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel54MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addGap(31, 31, 31)
                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel50MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel50MouseClicked
        VentanaPrincipal o = null;
        try {
            o = new VentanaPrincipal();
        } catch (org.itson.bdavanzadas.persistencia.exception.FindException ex) {
            Logger.getLogger(VentanaVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        o.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel50MouseClicked

    private void jLabel51MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel51MouseClicked
        // TODO add your handling code here:
        Ordenes o = new Ordenes();
        o.adminOrden = new FacadeAdminOrden();
        o.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel51MouseClicked

    private void jLabel52MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel52MouseClicked
    }//GEN-LAST:event_jLabel52MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked

        // orden compra integracion
        VentanaOrdenCompra voc = null;
        try {
            voc = new VentanaOrdenCompra();
        } catch (org.itson.bdavanzadas.persistencia.exception.FindException ex) {
            Logger.getLogger(VentanaVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        voc.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel53MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel53MouseClicked
        FrmInventariar o = null;
        try {
            o = new FrmInventariar();
        } catch (org.itson.bdavanzadas.persistencia.exception.FindException ex) {
            Logger.getLogger(VentanaVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        o.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel53MouseClicked

    private void jLabel54MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel54MouseClicked
        HistorialOrdenes o = new HistorialOrdenes();
        o.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel54MouseClicked

    private List<NuevaOrdenDTO> consultar() {
        // Obtener la lista de socios
        List<NuevaOrdenDTO> listaOrdens;
        try {
            listaOrdens = adminOrden.obtenerOrdenesCompletadas();

            modelo = new DefaultTableModel();

            modelo.addColumn("#");
            modelo.addColumn("Cliente");
            modelo.addColumn("Total");
            modelo.addColumn("Fecha");
            modelo.addColumn("");

            for (NuevaOrdenDTO orden : listaOrdens) {

                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

                String fechaFormateada = formato.format(orden.getFecha());

                Object[] fila = {
                    orden.getNumeroOrden(),
                    orden.getNombreCliente(),
                    orden.getTotal(),
                    fechaFormateada,};
                modelo.addRow(fila);
            }
            TableActionEvent event = new TableActionEvent() {
                @Override
                public void enCancelar(int row) {
                    List<NuevaOrdenDTO> ordenes = adminOrden.obtenerOrdenesCompletadas();
                    NuevaOrdenDTO OrdenSeleccionada = ordenes.get(row);
                    OrdenSeleccionada.toString();
                    VentanaCancelar VC = new VentanaCancelar(null, true, OrdenSeleccionada);
                    VC.setVisible(true);
                    if (tblOrdenes2.isEditing()) {
                        tblOrdenes2.getCellEditor().stopCellEditing();
                    }
                    if (VentanaCancelar.seCancelo()) {
                        DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                        model.removeRow(row);
                        tblOrdenes2.setModel(model);;
                    }
                    System.out.println("cancelar" + row + OrdenSeleccionada.getNumeroOrden());
                }

                @Override
                public void enPagar(int row) {
                    List<NuevaOrdenDTO> ordenes = adminOrden.obtenerOrdenesCompletadas();
                    NuevaOrdenDTO OrdenSeleccionada = ordenes.get(row);
                    System.out.println("pagar" + row);
                    VentanaOrdenPagar ordenPagar = new VentanaOrdenPagar(null, true, OrdenSeleccionada);

                    ordenPagar.setVisible(true);
                    if (tblOrdenes2.isEditing()) {
                        tblOrdenes2.getCellEditor().stopCellEditing();
                    }
                    if (VentanaPagarEfectivo.sePago()) {
                        DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                        model.removeRow(row);
                    }

                    if (VentanaPagarTarjeta3.sePago()) {
                        DefaultTableModel model = (DefaultTableModel) tblOrdenes2.getModel();
                        model.removeRow(row);
                        System.out.println("SE PAGO LA VENTA POR TARJETA");
                    } else {
                        System.out.println("NO SE PAGo");
                    }

                }
            };
            tblOrdenes2.getColumnModel().getColumn(4).setCellRenderer(new TableActionCellRender());
            tblOrdenes2.getColumnModel().getColumn(4).setCellEditor(new TableActionCellEditor(event));

            tblOrdenes2.setModel(modelo);
            return listaOrdens;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al consultar la información de las ordenes: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
        return null;
    }

    //    private void consultar() {
    //        // Obtener la lista de socios
    //        List<NuevaOrdenDTO> listaOrdens;
    //        try {
    //            listaOrdens = adminOrden.obtenerOrdenesCompletadas();
    //
    //            modelo = new DefaultTableModel() {
    //                @Override
    //                public boolean isCellEditable(int row, int column) {
    //                    return false; // No permitir la edición de celdas
    //                }
    //            };
    //
    //            modelo.addColumn("#");
    //            modelo.addColumn("Cliente");
    //            modelo.addColumn("Total");
    //            modelo.addColumn("Fecha");
    //            modelo.addColumn("");
    //
    //            for (NuevaOrdenDTO orden : listaOrdens) {
    //                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    //                String fechaFormateada = formato.format(orden.getFecha());
    //
    //                JButton btnCancelar = new JButton("Cancelar");
    //                btnCancelar.addActionListener(new ActionListener() {
    //                    @Override
    //                    public void actionPerformed(ActionEvent e) {
    //                        // Acción para cancelar la orden
    //                        // Aquí puedes obtener el número de orden y realizar la acción de cancelación
    //                        int fila = tblOrdenes.getSelectedRow();
    //                        int numeroOrden = (int) tblOrdenes.getValueAt(fila, 0);
    //                        System.out.println("Hola");
    //                        // adminOrden.cancelarOrden(numeroOrden);
    //                        // Después de cancelar, podrías actualizar la tabla llamando a consultar()
    //                        consultar();
    //                    }
    //                });
    //
    //                JButton btnPagar = new JButton("Pagar");
    //                btnPagar.addActionListener(new ActionListener() {
    //                    @Override
    //                    public void actionPerformed(ActionEvent e) {
    //                        // Acción para pagar la orden
    //                        // Aquí puedes obtener el número de orden y realizar la acción de pago
    //                        int fila = tblOrdenes.getSelectedRow();
    //                        int numeroOrden = (int) tblOrdenes.getValueAt(fila, 0);
    //                        System.out.println("Adios");
    //                        // Realizar la acción de pago con el número de orden
    //                    }
    //                });
    //                // Agregar los botones como componentes a la tabla
    //
    //                Object[] fila = {
    //                    orden.getNumeroOrden(),
    //                    orden.getNombreCliente(),
    //                    orden.getTotal(),
    //                    fechaFormateada,
    //                    // Agregamos el panel con los botones a la tabla
    //                };
    //                modelo.addRow(fila);
    //            }
    //
    //            tblOrdenes.setModel(modelo);
    //
    ////            tblOrdenes.addMouseListener(new MouseAdapter() {
    ////                @Override
    ////                public void mouseClicked(MouseEvent e) {
    ////                    int fila = tblOrdenes.rowAtPoint(e.getPoint());
    ////                    int columna = tblOrdenes.columnAtPoint(e.getPoint());
    ////                    if (fila >= 0 && columna == 4) {
    ////                        // Se hizo clic en el botón "Cancelar"
    ////                        int modelRow = tblOrdenes.convertRowIndexToModel(fila);
    ////                        new ButtonAction("Cancelar").performAction(modelRow);
    ////                    } else if (fila >= 0 && columna == 5) {
    ////                        // Se hizo clic en el botón "Pagar"
    ////                        int modelRow = tblOrdenes.convertRowIndexToModel(fila);
    ////                        new ButtonAction("Pagar").performAction(modelRow);
    ////                    }
    ////                }
    ////            });
    //            //            List<String> buttonTexts = new ArrayList<>();
    //            //            buttonTexts.add("Cancelar");
    //            //            
    //            //            List<String> buttonTextss = new ArrayList<>();
    //            //            buttonTextss.add("Pagar");
    //            //
    //            //            List<ActionListener> cancelarListeners = new ArrayList<>();
    //            //            cancelarListeners.add(new ActionListener() {
    //            //                @Override
    //            //                public void actionPerformed(ActionEvent e) {
    //            //                    int fila = tblOrdenes.convertRowIndexToModel(tblOrdenes.getSelectedRow());
    //            //                    NuevaOrdenDTO ordenSeleccionada = listaOrdens.get(fila);
    //            //                    System.out.println("Presiono cancelar");
    //            //                    consultar();
    //            //                }
    //            //            });
    //            //
    //            //            List<ActionListener> pagarListeners = new ArrayList<>();
    //            //            pagarListeners.add(new ActionListener() {
    //            //                @Override
    //            //                public void actionPerformed(ActionEvent e) {
    //            //                    int fila = tblOrdenes.convertRowIndexToModel(tblOrdenes.getSelectedRow());
    //            //                    NuevaOrdenDTO ordenSeleccionada = listaOrdens.get(fila);
    //            //                    System.out.println("Presiono pagar");
    //            //                }
    //            //            });
    //            //
    //            //            ButtonColumn cancelarColumn = new ButtonColumn(buttonTexts, cancelarListeners);
    //            //            ButtonColumn pagarColumn = new ButtonColumn(buttonTextss, pagarListeners);
    //            //
    //            //            tblOrdenes.getColumnModel().getColumn(4).setCellRenderer(cancelarColumn);
    //            //            tblOrdenes.getColumnModel().getColumn(4).setCellEditor(cancelarColumn);
    //            //
    //            //            tblOrdenes.getColumnModel().getColumn(5).setCellRenderer(pagarColumn);
    //            //            tblOrdenes.getColumnModel().getColumn(5).setCellEditor(pagarColumn);
    //            //            List<String> buttonTexts = new ArrayList<>();
    //            //            buttonTexts.add("Cancelar");
    //            //            buttonTexts.add("Pagar");
    //            //
    //            //            List<ActionListener> actionListeners = new ArrayList<>();
    //            //            actionListeners.add(new ActionListener() {
    //            //                @Override
    //            //                public void actionPerformed(ActionEvent e) {
    //            //                    int fila = tblOrdenes.convertRowIndexToModel(tblOrdenes.getSelectedRow());
    //            //                    NuevaOrdenDTO ordenSeleccionada = listaOrdens.get(fila);
    //            //                    System.out.println("Presiono cancelar");
    //            //                    consultar();
    //            //
    //            ////                    try {
    //            ////                        adminOrden.cancelarOrden(ordenSeleccionada);
    //            ////                        consultar();
    //            ////                    } catch (Exception ex) {
    //            ////                        JOptionPane.showMessageDialog(VentanaVentas.this, "Error al cancelar la orden: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    //            ////                    }
    //            //                }
    //            //            });
    //            //            actionListeners.add(new ActionListener() {
    //            //                @Override
    //            //                public void actionPerformed(ActionEvent e) {
    //            //                    int fila = tblOrdenes.convertRowIndexToModel(tblOrdenes.getSelectedRow());
    //            //                    NuevaOrdenDTO ordenSeleccionada = listaOrdens.get(fila);
    //            //                    System.out.println("Presiono pagar");
    //            ////                    VentanaOrdenPagar ordenPagar = new VentanaOrdenPagar(null, true, ordenSeleccionada);
    //            ////                    ordenPagar.setVisible(true);
    //            ////                    consultar();
    //            //                }
    //            //            });
    //            //
    //            //            ButtonColumn buttonColumn = new ButtonColumn(buttonTexts, actionListeners);
    //            //
    //            //            tblOrdenes.getColumnModel().getColumn(4).setCellRenderer(buttonColumn);
    //            //            tblOrdenes.getColumnModel().getColumn(4).setCellEditor(buttonColumn);
    //            //
    //            //            tblOrdenes.getColumnModel().getColumn(5).setCellRenderer(buttonColumn);
    //            //            tblOrdenes.getColumnModel().getColumn(5).setCellEditor(buttonColumn);
    //        } catch (Exception e) {
    //            Logger.getLogger(VentanaVentas.class.getName()).log(Level.SEVERE, "Error al consultar la información de las ordenes", e);
    //        }
    //    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTable tblOrdenes2;
    // End of variables declaration//GEN-END:variables
}
